-- TIXR: PURCHASE HT EVENTS MODEL --

WITH PurchaseWithParsed AS (
  SELECT *,
    CASE 
      WHEN IS_NULL_VALUE(PARSE_JSON(PRODUCTS)) OR ARRAY_SIZE(PARSE_JSON(PRODUCTS)) = 0 
      THEN PARSE_JSON('[{"product_id": null, "quantity": null}]')
      ELSE PARSE_JSON(PRODUCTS)
    END AS PARSED_PRODUCTS
  FROM <<SCHEMA_NAME_GOES_HERE>>.PURCHASE
),
IdentifiesRanked AS (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY EXTERNAL_ID ORDER BY TIMESTAMP DESC) as rn
    FROM <<SCHEMA_NAME_GOES_HERE>>.IDENTIFIES
),
PagesRanked AS (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY EXTERNAL_ID ORDER BY TIMESTAMP DESC) as rn
    FROM <<SCHEMA_NAME_GOES_HERE>>.PAGES
),
BaseWithFlattened AS (
    SELECT
        p.UUID,
        p.ORDER_ID,
        p.TIMESTAMP,
        p.CONTEXT_PAGE_URL,
        p.CONTEXT_PAGE_PATH,
        p.CONTEXT_PAGE_TITLE,
        p.CONTEXT_PAGE_SEARCH,
        p.CONTEXT_PAGE_REFERRER,
        pr.FBC as FBC,
        'product' as CONTENT_TYPE,
        p.VALUE,
        p.CURRENCY,  
        COALESCE(p.EXTERNAL_ID, i.EXTERNAL_ID) as EXTERNAL_ID,
    TRIM(LOWER(COALESCE(i.EMAIL, p.EMAIL, pr.EMAIL, p.CUSTOM_EMAIL))) as EMAIL,
    CASE 
        WHEN COALESCE(p.PHONE_NUMBER, pr.PHONE_NUMBER, i.PHONE_NUMBER) IS NOT NULL THEN
            CASE
                WHEN REGEXP_LIKE(COALESCE(p.PHONE_NUMBER, pr.PHONE_NUMBER, i.PHONE_NUMBER), '^\\+1[2-9][0-9]{2}[2-9][0-9]{6}$') THEN
                    COALESCE(p.PHONE_NUMBER, pr.PHONE_NUMBER, i.PHONE_NUMBER)
                WHEN REGEXP_LIKE(
                    REGEXP_REPLACE(COALESCE(p.PHONE_NUMBER, pr.PHONE_NUMBER, i.PHONE_NUMBER), '^((\\+1\\+?)|(\\+1)|(\\+))', ''),
                    '^[2-9][0-9]{2}[2-9][0-9]{6}$'
                ) THEN
                    '+1' || REGEXP_REPLACE(
                        COALESCE(p.PHONE_NUMBER, pr.PHONE_NUMBER, i.PHONE_NUMBER),
                        '^((\\+1\\+?)|(\\+1)|(\\+))',
                        ''
                    )
                ELSE NULL
            END
        ELSE NULL
    END AS PHONE_NUMBER,
    TRIM(LOWER(COALESCE(i.FIRST_NAME, pr.FIRST_NAME, p.FIRST_NAME))) as FIRST_NAME,
    TRIM(LOWER(LEFT(COALESCE(i.FIRST_NAME, pr.FIRST_NAME, p.FIRST_NAME), 1))) as FIRST_INITIAL,
    TRIM(LOWER(COALESCE(i.LAST_NAME, pr.LAST_NAME, p.LAST_NAME))) as LAST_NAME,
    TO_CHAR(TO_DATE(COALESCE(p.BIRTHDAY, pr.BIRTHDAY), 'DD-MM-YYYY'), 'YYYYMMDD') AS BIRTHDAY,
    TRIM(LOWER(LEFT(COALESCE(p.GENDER, pr.GENDER),1))) AS GENDER,
    COALESCE(p.POSTAL_CODE, pr.POSTAL_CODE) AS ZIP_CODE,
        COALESCE(p.FBP, i.FBP, pr.FBP) as FBP,
        p.CONTEXT_IP as IP_ADDRESS,
        p.CONTEXT_USER_AGENT as USER_AGENT,
        p.CONTEXT_TIMEZONE as USER_TIMEZONE,
        p.CONTEXT_LOCALE as USER_LOCALE,
        LOWER(SPLIT_PART(p.CONTEXT_LOCALE, '-', 1)) as LANGUAGE_TAG,
        CASE 
            WHEN LENGTH(LOWER(SPLIT_PART(p.CONTEXT_LOCALE, '-', 2))) = 2 THEN LOWER(SPLIT_PART(p.CONTEXT_LOCALE, '-', 2))
            ELSE NULL
        END as COUNTRY_CODE,

        -- ADVERTISING IDS
        CASE WHEN p.CONTEXT_PAGE_SEARCH LIKE '%gclid=%' THEN SPLIT_PART(SPLIT_PART(p.CONTEXT_PAGE_SEARCH, 'gclid=', 2), '&', 1) ELSE NULL END AS GCLID,
        CASE WHEN p.CONTEXT_PAGE_URL LIKE '%gbraid=%' THEN SPLIT_PART(SPLIT_PART(p.CONTEXT_PAGE_URL, 'gbraid=', 2), '&', 1) ELSE NULL END AS GBRAID,
        CASE WHEN p.CONTEXT_PAGE_URL LIKE '%wbraid=%' THEN SPLIT_PART(SPLIT_PART(p.CONTEXT_PAGE_URL, 'wbraid=', 2), '&', 1) ELSE NULL END AS WBRAID,
        CASE WHEN p.CONTEXT_PAGE_URL LIKE '%ttclid=%' THEN SPLIT_PART(SPLIT_PART(p.CONTEXT_PAGE_URL, 'ttclid=', 2), '&', 1) ELSE NULL END AS TTCLID,
        CASE WHEN p.CONTEXT_PAGE_URL LIKE '%ScCid=%' THEN SPLIT_PART(SPLIT_PART(p.CONTEXT_PAGE_URL, 'ScCid=', 2), '&', 1) ELSE NULL END AS SCCID,

        -- PRODUCT DETAILS FROM FLATTEN
        f.value:"product_id"::STRING AS PRODUCT_ID,
        f.value:"quantity"::NUMBER AS QUANTITY

    FROM PurchaseWithParsed p
    LEFT JOIN IdentifiesRanked i ON p.EXTERNAL_ID = i.EXTERNAL_ID AND i.rn = 1
    LEFT JOIN PagesRanked pr ON p.EXTERNAL_ID = pr.EXTERNAL_ID AND pr.rn = 1
    , LATERAL FLATTEN(INPUT => p.PARSED_PRODUCTS) f
    WHERE p.TIMESTAMP >= DATEADD(DAY, -7, CURRENT_TIMESTAMP)
),
UUIDRanked AS (
    SELECT *,
        ROW_NUMBER() OVER (PARTITION BY UUID ORDER BY TIMESTAMP DESC) AS rn
    FROM BaseWithFlattened
)

SELECT
    UUID,
    ORDER_ID,
    TIMESTAMP,
    CONTEXT_PAGE_URL as PAGE_URL,
    CONTEXT_PAGE_PATH as PAGE_PATH,
    CONTEXT_PAGE_TITLE as PAGE_TITLE,
    CONTEXT_PAGE_SEARCH as PAGE_SEARCH,
    CONTEXT_PAGE_REFERRER as PAGE_REFERRER,
    FBC,
        -- FORMATTED ARRAY OF CONTENT_IDS
    ARRAY_AGG(DISTINCT PRODUCT_ID) AS CONTENT_IDS,

    -- FORMATTED JSON-STYLE OBJECTS
    ARRAY_AGG(
        '{' ||
        '''id'': ''' || PRODUCT_ID || ''', ' ||
        '''quantity'': ' || QUANTITY ||
        '}'
    ) AS CONTENTS,
    CONTENT_TYPE,
    QUANTITY,
    VALUE,
    CURRENCY,
    EXTERNAL_ID,
    EMAIL,
    PHONE_NUMBER,
    FIRST_NAME,
    FIRST_INITIAL,
    LAST_NAME,
    BIRTHDAY,
    GENDER,
    ZIP_CODE,
    FBP,
    IP_ADDRESS,
    USER_AGENT,
    USER_TIMEZONE,
    USER_LOCALE,
    LANGUAGE_TAG,
    COUNTRY_CODE,
    GCLID,
    GBRAID,
    WBRAID,
    TTCLID,
    SCCID,

FROM UUIDRanked
WHERE rn = 1
GROUP BY
    UUID, ORDER_ID, TIMESTAMP, CONTEXT_PAGE_URL, CONTEXT_PAGE_PATH, CONTEXT_PAGE_TITLE,
    CONTEXT_PAGE_SEARCH, CONTEXT_PAGE_REFERRER, FBC, CONTENT_TYPE, QUANTITY, VALUE, CURRENCY,
    EXTERNAL_ID, EMAIL, PHONE_NUMBER, FIRST_NAME, FIRST_INITIAL, LAST_NAME, BIRTHDAY, GENDER,
    ZIP_CODE, FBP, IP_ADDRESS,
    USER_AGENT, USER_TIMEZONE, USER_LOCALE, LANGUAGE_TAG, COUNTRY_CODE,
    GCLID, GBRAID, WBRAID, TTCLID, SCCID
ORDER BY TIMESTAMP DESC;